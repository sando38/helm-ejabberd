apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "ejabberd.fullname" . }}-startup-scripts
  namespace: {{ template "ejabberd.namespace" . }}
  labels:
    {{- include "ejabberd.labels" $ | nindent 4 }}
data:
  ejabberdctl: |-
    #!/bin/sh

    # Determine pod's cluster name
    pod_name="${POD_NAME:-$(hostname -s)}" # e.g. pod-0
    pod_endpoint_name="$(hostname -f)" # e.g. pod-0.servicename.namespace.svc.cluster.local
    sts_name="$(echo $pod_name | sed 's|-[0-9]\+||g')"

    [ -z "$ERLANG_NODE_ARG" ] && export ERLANG_NODE_ARG="$sts_name@$pod_endpoint_name"
    export CONFIG_DIR="$HOME"/conf
    export LOGS_DIR="$HOME"/logs
    export SPOOL_DIR="$HOME"/database

    exec $(find /opt -name ejabberdctl) "$@"

  healthcheck.sh: |-
    #!/bin/sh

    myself=${0##*/}

    info()
    {
        echo "$myself: $*"
    }

    error()
    {
        echo >&2 "$myself: $*"
    }

    pod_name="${POD_NAME:-$(hostname -s)}" # e.g. pod-0
    pod_endpoint_name="$(hostname -f)" # e.g. pod-0.servicename.namespace.svc.cluster.local
    headless_svc="$(hostname -d)" # e.g. servicename.namespace.default.svc.cluster.local
    svc_pod_names="$(nslookup -q=srv "$headless_svc" | grep "$headless_svc" | awk '{print $NF}')"
    cluster_pod_names="$(echo $svc_pod_names | sed -e "s|$pod_name.$headless_svc||g")"
    sts_name="$(echo $pod_name | sed 's|-[0-9]\+||g')"
    api_url="{{ default "127.0.0.1" .Values.certFiles.sideCar.apiAddress }}:{{ default 5281 .Values.certFiles.sideCar.apiPort }}"
    pod_status="$(wget -O - --post-data '{}' $api_url/api/status || echo 'unhealthy')"
    election_url="${ELECTION_URL:-127.0.0.1:4040}"

    # List cluster members
    _cluster_member() {
        members="$(wget -q -O - --post-data '{}' $api_url/api/list_cluster | egrep -o '[^][]+' | tr ',' '\n')"
        printf "$members"
    }

    # (Re-)join cluster - DNSSRV derived
    _join_cluster_dns() {
        [ -e "$HOME/.ejabberd_ready" ] && rm $HOME/.ejabberd_ready
        join_pod_name="$(echo $cluster_pod_names | sort -n | awk 'NR==1{print $1}')"
        if echo "$(_cluster_member)" | grep -q "$join_pod_name"
        then
            info "==> $pod_name is clustered w/ pod w/ lowest ordinal $join_pod_name ..."
            touch $HOME/.ejabberd_ready && return 0
        else
            info "==> Leaving former cluster ..."
            NO_WARNINGS=true ejabberdctl leave_cluster "$sts_name@$pod_name.${headless_svc}"
            while ! nc -z "$join_pod_name:${ERL_DIST_PORT:-5210}"; do sleep 1; done
            info "==> Will (re-)join ejabberd pod $sts_name@$join_pod_name ..."
            ejabberdctl join_cluster "$sts_name@$join_pod_name" && sleep 5s
            if echo "$(_cluster_member)" | grep -q "$join_pod_name"
            then
                touch $HOME/.ejabberd_ready && return 0
            else
                return 3
            fi
        fi
    }

    # (Re-)join cluster - election derived
    _join_cluster_elector() {
        [ -e "$HOME/.ejabberd_ready" ] && rm $HOME/.ejabberd_ready
        if [ "$(echo $(_cluster_member) | wc -l)" -gt "1" ]
        then
            info "==> Leaving non-leader cluster ..."
            NO_WARNINGS=true ejabberdctl leave_cluster "$sts_name@$pod_name.${headless_svc}"
        fi
        while ! nc -z "$leader.${headless_svc}:${ERL_DIST_PORT:-5210}"; do sleep 1; done
        info "==> Will (re-)join leader "$sts_name@$leader.${headless_svc}" ..."
        ejabberdctl join_cluster "$sts_name@$leader.${headless_svc}" && sleep 5s
        if echo "$(_cluster_member)" | grep -q "$leader"
        then
            touch $HOME/.ejabberd_ready && return 0
        else
            return 3
        fi
    }

    if [ ! "$pod_status" = 'unhealthy' ] && ([ -e $HOME/.ejabberd_ready ] || [ "${STARTUP:-false}" = 'true' ] )
    then
        if [ "${K8S_CLUSTERING:-false}" = 'false' ]
        then
            [ ! -e "$HOME/.ejabberd_ready" ] && touch $HOME/.ejabberd_ready
            return 0
        elif [ "${ELECTOR_ENABLED:-false}" = 'true' ]
        then
            export leader="$(wget -cq $election_url -O - | jq -r .leader)"
            ## leader is always right!
            if [ "$leader" = "$pod_name" ]
            then
                info "==> $pod_name is elected leader and healthy ..."
                [ ! -e "$HOME/.ejabberd_ready" ] && touch $HOME/.ejabberd_ready
                return 0
            ## if leader is not part of fellow's cluster list, re-join leader.
            elif echo "$(_cluster_member)" | grep -q "$leader"
            then
                info "==> $pod_name is fellow, healthy and connected to leader $leader ..."
                [ ! -e "$HOME/.ejabberd_ready" ] && touch $HOME/.ejabberd_ready
                return 0
            else
                info "==> $pod_name is fellow, but not connected to leader $leader ..."
                _join_cluster_elector
            fi
        elif [ ! -z "$cluster_pod_names" ] && [ ! "$cluster_pod_names" = 'NXDOMAIN' ]
        then
            info "==> Other healthy pods detected ..."
            _join_cluster_dns
        else
            info "==> No other healthy pods detected ..."
            [ ! -e "$HOME/.ejabberd_ready" ] && touch $HOME/.ejabberd_ready
            return 0
        fi
    else
        return 3
    fi

  run.sh: |-
    #!/bin/sh

    set -e
    set -u

    myself=${0##*/}

    info()
    {
        echo "$myself: $*"
    }

    error()
    {
        echo >&2 "$myself: $*"
    }

    info '=> Start init script for ejabberd k8s container ...'
    info '==> Helm chart source code can be found on github:'
    info '    https://github.com/sando38/helm-ejabberd'
    info '==> Official ejabberd documentation on https://docs.ejabberd.im ...'
    info '==> Source code on https://github.com/processone/ejabberd ...'
    info ''
    info '=> NOTE:'
    info '   If you run this image in a single app environment, e.g. with Docker,'
    info '   then set the environment variable:'
    info '       ERLANG_NODE_ARG=ejabberd@localhost'
    info '   for improved compatibility. More info can be found here:'
    info '   https://github.com/processone/docker-ejabberd/tree/master/ecs#change-mnesia-node-name'
    info ''
    info '=> Thanks to all who made this work possible. Special thanks to Holger'
    info '   @weiss for open ears and brainstorming!'
    info ''
    info "=> Pod started on $(date)."
    info ''

    # Common variables
    pod_name="${POD_NAME:-$(hostname -s)}" # e.g. pod-0
    pod_endpoint_name="$(hostname -f)" # e.g. pod-0.servicename.namespace.svc.cluster.local
    pod_namespace="${POD_NAMESPACE:-default}"
    sts_name="$(echo $pod_name | sed 's|-[0-9]\+||g')"
    election_name="${ELECTION_NAME:-ejabberd}"
    election_url="${ELECTION_URL:-127.0.0.1:4040}"
    election_ttl="${ELECTION_TTL:-10s}"
    ready_file="$HOME/.ejabberd_ready"

    [ -e "$ready_file" ] && rm "$ready_file"

    info "==> This is ejabberd node $sts_name@$pod_endpoint_name ..."

    ## Inspired by https://github.com/Lykos153/ejabberd-cluster-k8s
    ## TODO: Write an ejabberd module for https://github.com/vapor-ware/k8s-elector
    ##       or check: https://github.com/bitwalker/libcluster
    ##                 https://github.com/pedro-gutierrez/cluster
    _start_elector() {
        info "==> Start elector sidecar service on $election_url ..."
        elector -election "$election_name" \
                -namespace "$pod_namespace" \
                -http "$election_url" \
                -ttl "$election_ttl" &
        export pid_elector=$!

        info "==> Wait for elector sidecar to be available on $election_url ..."
        while ! nc -z "$election_url"; do sleep 1; done
        info "==> elector sidecar is available on $election_url ..."
    }

    # trap for graceful shutdown
    _shutdown() {
        if [ "${ELECTOR_ENABLED:-false}" = 'true' ]
        then kill -s TERM "$pid_elector"
        fi
        ## disconnection from cluster happens automatically
        info "==> Gracefully shut down ejabberd pod $sts_name@$pod_endpoint_name ..."
        ejabberdctl stop
        ejabberdctl stopped
    }

    # trap SIGTERM
    trap '_shutdown' SIGTERM

    info '==> Start ejabberd main process ...'
    ejabberdctl foreground &
    pid_ejabberd=$!

    ## Start elector, if enabled
    [ "${ELECTOR_ENABLED:-false}" = 'true' ] && _start_elector

    ejabberdctl started
    STARTUP='true' healthcheck.sh || _shutdown

    wait ${pid_ejabberd-} ${pid_elector-}

